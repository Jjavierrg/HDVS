/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as jQuery from 'jquery';

export class ApiClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    auth(body: LoginAttempDto | undefined) {
        return new Promise<UserTokenDto>((resolve, reject) => {
            this.authWithCallbacks(body, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private authWithCallbacks(body: LoginAttempDto | undefined, onSuccess?: (result: UserTokenDto) => void, onFail?: (exception: ProblemDetails | string, reason: string) => void) {
        let url_ = this.baseUrl + "/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processAuthWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAuthWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAuthWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAuth(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAuth(xhr: any): UserTokenDto | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserTokenDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = xhr.responseText;
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    refresh(body: RefreshTokenAttempDto | undefined) {
        return new Promise<UserTokenDto>((resolve, reject) => {
            this.refreshWithCallbacks(body, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private refreshWithCallbacks(body: RefreshTokenAttempDto | undefined, onSuccess?: (result: UserTokenDto) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Auth/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRefreshWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRefreshWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRefresh(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRefresh(xhr: any): UserTokenDto | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserTokenDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    logout() {
        return new Promise<void>((resolve, reject) => {
            this.logoutWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private logoutWithCallbacks(onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processLogoutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processLogoutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processLogoutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processLogout(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processLogout(xhr: any): void | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status === 401) {
            const _responseText = xhr.responseText;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = xhr.responseText;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class LoginAttempDto implements ILoginAttempDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginAttempDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginAttempDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginAttempDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }

    clone(): LoginAttempDto {
        const json = this.toJSON();
        let result = new LoginAttempDto();
        result.init(json);
        return result;
    }
}

export interface ILoginAttempDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class UserTokenDto implements IUserTokenDto {
    accessToken?: string | undefined;
    expiresIn?: number;
    refreshToken?: string | undefined;

    constructor(data?: IUserTokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.expiresIn = _data["expiresIn"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): UserTokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserTokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["expiresIn"] = this.expiresIn;
        data["refreshToken"] = this.refreshToken;
        return data; 
    }

    clone(): UserTokenDto {
        const json = this.toJSON();
        let result = new UserTokenDto();
        result.init(json);
        return result;
    }
}

export interface IUserTokenDto {
    accessToken?: string | undefined;
    expiresIn?: number;
    refreshToken?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }

    clone(): ProblemDetails {
        const json = this.toJSON();
        let result = new ProblemDetails();
        result.init(json);
        return result;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class RefreshTokenAttempDto implements IRefreshTokenAttempDto {
    userId?: number;
    refreshToken?: string | undefined;

    constructor(data?: IRefreshTokenAttempDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshTokenAttempDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenAttempDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["refreshToken"] = this.refreshToken;
        return data; 
    }

    clone(): RefreshTokenAttempDto {
        const json = this.toJSON();
        let result = new RefreshTokenAttempDto();
        result.init(json);
        return result;
    }
}

export interface IRefreshTokenAttempDto {
    userId?: number;
    refreshToken?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}